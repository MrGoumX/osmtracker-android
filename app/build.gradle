apply plugin: 'com.android.application'
apply plugin: 'gr.aueb.android.barista-plugin'
apply plugin: 'jacoco'

repositories {
    google()
    jcenter()
    mavenLocal()
}

android {

    useLibrary 'org.apache.http.legacy'
    compileSdkVersion 28
    buildToolsVersion = '28.0.3'

    defaultConfig {
        applicationId "net.osmtracker"
        minSdkVersion 16
        targetSdkVersion 28
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArgument "listener", "gr.aueb.android.barista.core.BaristaRunListener"
    }

    signingConfigs {
        // Create a file $HOME/.gradle/gradle.properties
        // containing the values signing.storeFile=..., etc.
        if (project.hasProperty('signing.storeFile')) {
            release {
                storeFile file(project.property('signing.storeFile'))
                storePassword project.property('signing.storePassword')
                keyAlias project.property('signing.keyAlias')
                keyPassword project.property('signing.keyPassword')
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            if (signingConfigs.hasProperty('release')) {
                signingConfig signingConfigs.release
            }

        }

        debug {
            minifyEnabled false
            debuggable true
            testCoverageEnabled true
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    android {
        lintOptions {
            abortOnError false
        }
    }

    defaultConfig {
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArgument "listener", "gr.aueb.android.barista.core.BaristaRunListener"
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

}

dependencies {

    implementation 'org.apache.james:apache-mime4j-core:0.7.2'

    implementation ('org.apache.httpcomponents:httpmime:4.3.6')
    //implementation 'org.apache.httpcomponents:httpclient-android:4.3.5'

    implementation 'org.osmdroid:osmdroid-android:6.1.0'
    implementation 'org.apache.httpcomponents:httpcore:4.4.10'

    implementation 'oauth.signpost:signpost-commonshttp4:1.2.1.2'
    implementation 'org.slf4j:slf4j-android:1.7.25'
    implementation "com.android.support:support-compat:28.0.0"

    // Required for local unit tests (JUnit 4 framework)
    testImplementation 'junit:junit:4.12'

    // Required for instrumented tests
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'

    // Barista Library
    androidTestImplementation "gr.aueb.android:barista:1.0-beta"

    androidTestImplementation "gr.aueb.android:barista:1.0-beta@aar"

    compileOnly 'org.jbundle.util.osgi.wrapped:org.jbundle.util.osgi.wrapped.org.apache.http.client:4.1.2'
}

task copyNorwegianValues(type: Copy) {
    from 'src/main/res/values-nb/'
    into 'src/main/res/values-no/'
}

task copyNorwegianXml(type: Copy) {
    from 'src/main/res/xml-nb/'
    into 'src/main/res/xml-no/'
}

android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        // Copying 'nb' resources to 'no' (See pull request #6)
        output.processResources.dependsOn([copyNorwegianValues, copyNorwegianXml])
    }
}

task jacocoTestReport(type: JacocoReport) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*',
                      '**/data/models/*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$project.rootDir", includes: [
            "coverage.exec"
    ])
}

baristaSettings {
    port = 8040
    host = "192.168.1.7"
}